// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL") // Using Prisma Accelerate URL for better performance
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // For credentials authentication
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Your existing models
model ReadingAttempt {
  id          String      @id @default(cuid())
  userId      String      // Foreign key to your User model
  startedAt   DateTime    @default(now())
  completedAt DateTime?
  score       Int?        // Final score out of 100
  timeSpent   Int?        // Time spent in seconds
  answers     Json        // Store answers as JSON
  sections    Json        // Store section scores as JSON
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ReadingText {
  id          String      @id @default(cuid())
  title       String
  content     String      @db.Text
  type        String      // informative, narrative, functional, opinion
  difficulty  String      // C1
  questions   Json        // Store questions and correct answers as JSON
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
